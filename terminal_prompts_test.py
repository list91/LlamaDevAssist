import http.client
import json
import socket

def handle_api_error(response_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API"""
    try:
        error_data = json.loads(response_text)
        if 'error' in error_data:
            if 'rate limit exceeded' in error_data['error'].lower():
                return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–∞—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            return f"–û—à–∏–±–∫–∞ API: {error_data['error']}"
    except json.JSONDecodeError:
        return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}"
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API"

def send_prompt_to_llm(prompt):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –≤ LLM —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        print("Connecting to localhost:11434...")
        conn = http.client.HTTPConnection("localhost", 11434)
        payload = json.dumps({
            "model": "llama3.2",
            "system": """You are an AI assistant capable of sending signals to execute various actions.

Follow the user's requirements carefully and to the letter. First, think step-by-step and describe your plan for what to build in pseudocode, written out in great detail. Then, output the code in a single code block. Minimize any other prose.""",
            "prompt": prompt,
            "stream": True
        })
        headers = {
            'Content-Type': 'application/json'
        }
        
        print("Sending request...")
        conn.request("POST", "/api/generate", payload, headers)
        print("Getting response...")
        res = conn.getresponse()
        print(f"Response status: {res.status} {res.reason}")
        
        if res.status != 200:
            error_text = res.read().decode('utf-8')
            print(handle_api_error(error_text))
            return None

        accumulated_response = ""
        buffer = ""
        
        while True:
            chunk = res.read(1024)
            if not chunk:
                break
                
            buffer += chunk.decode('utf-8')
            
            while '\n' in buffer:
                line, buffer = buffer.split('\n', 1)
                if not line.strip():
                    continue
                    
                try:
                    response = json.loads(line)
                    if 'response' in response:
                        current_text = response['response']
                        print(current_text, end='', flush=True)
                        accumulated_response += current_text
                except json.JSONDecodeError:
                    continue
        
        # Process any remaining buffer content
        if buffer.strip():
            try:
                response = json.loads(buffer)
                if 'response' in response:
                    current_text = response['response']
                    print(current_text, end='', flush=True)
                    accumulated_response += current_text
            except json.JSONDecodeError:
                pass
        
        print("\nComplete response:", accumulated_response)
        return accumulated_response
    
    except Exception as e:
        print(f"Error occurred: {str(e)}")
        return None

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
terminal_prompts = {
    1: {
        "prompt": "—Å–ª—É—à–∞–π, –∫–∞–∫ –º–Ω–µ —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ?",
        "expected_command": "df -h",
        "description": "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –¥–∏—Å–∫–∞"
    },
    2: {
        "prompt": "–±–ª–∏–Ω, –∫–æ–º–ø —Ç–æ—Ä–º–æ–∑–∏—Ç, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∂—Ä—É—Ç –ø–∞–º—è—Ç—å?",
        "expected_command": "top",
        "description": "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    },
    3: {
        "prompt": "—á–µ–ª, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –≤ –ø–∞–ø–∫–µ, –ø–æ–º–æ–≥–∏",
        "expected_command": "ls",
        "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    },
    4: {
        "prompt": "–∫–∞–∫—É—é —Ö—Ä–µ–Ω–æ—Ç–µ–Ω—å –º–Ω–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏?",
        "expected_command": "dir",
        "description": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (Windows)"
    },
    5: {
        "prompt": "–±–ª–∏–Ω, –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ip –∞–¥—Ä–µ—Å",
        "expected_command": "ipconfig",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
    },
    6: {
        "prompt": "—ç–π, –∫–∞–∫ –º–Ω–µ –≥–ª—è–Ω—É—Ç—å –∫–∞–∫–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã?",
        "expected_command": "netstat -tuln",
        "description": "–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"
    },
    7: {
        "prompt": "–Ω–∞—Ä–æ–¥, –∫–∞–∫ —É–∑–Ω–∞—Ç—å –≤–µ—Ä—Å–∏—é –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–∏?",
        "expected_command": "free -h",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏"
    },
    8: {
        "prompt": "–ø–∞–¥–∞–∂–∂–∏, –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ?",
        "expected_command": "du -sh *",
        "description": "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    },
    9: {
        "prompt": "–±–ª–∏–Ω, –∫–∞–∫ –º–Ω–µ –≥–ª—è–Ω—É—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥?",
        "expected_command": "history",
        "description": "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    },
    10: {
        "prompt": "–π–æ—É, –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ —Å–µ–π—á–∞—Å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ?",
        "expected_command": "who",
        "description": "–°–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    }
}

def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n")
    
    for num, details in terminal_prompts.items():
        print(f"–ü—Ä–æ–º–ø—Ç #{num}: {details['prompt']}")
        print(f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {details['expected_command']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {details['description']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ LLM
        llm_response = send_prompt_to_llm(details['prompt'])
        
        print("\n–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM:")
        if llm_response:
            print(llm_response)
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
        
        print("-" * 50 + "\n")

if __name__ == "__main__":
    main()
