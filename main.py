
"""
пример работы:
ПО ищет массив хистори контекста, если есть то в глобальный пишем его содержиое, а если нет то создаем пустой


я пишу соо и отправляю
данный текст добавляем в хистори конекст дополнительно добавляя в локальный и с имеющимся конекстом отправляем в ИИ дожидаясь ответа
полученный ответ парсим на наличие сигналов, если да то формируем ответ так: *ответка*\nсигнал контент + Выберите действие
после этого мы можем согласиться отправив 1 или отказаться 0

как реагируют сигналы на '1':
рун_коммнад - внутри доп оболочки выполняет команду, как только кончит так его вывод добавляем в конекст...отдаем ИИ и ждем ответа
анализ - логика которая принимает путь и возвращает метаданные файла или директории (размер, владелец и т. д.), вывод добавляем в конекст...отдаем ИИ и ждем ответа
чтение_файла - принимает путь к файлу и возвращает содержимое, вывод добавляем в конекст...отдаем ИИ и ждем ответа
серч - принимает путь и строку, динамически ищет и вернет число совпадений, вывод добавляем в конекст...отдаем ИИ и ждем ответа
создать_файл - принимает путь, строку, строку; создаст файл с заданным содержимым, именем, в заданном месте, вернет успех?, вывод добавляем в конекст...отдаем ИИ и ждем ответа
редачить_файл? - допустим чтобы ИИ понял как изменить текст ему нужен текст, даем ему весь

цель:
выполнить действие - отредактировать файл проекта, собрать его и по рещультатам снова редачим либо готово
"""
from chat_bot import ChatBot
import asyncio
import signals
import os
DEBUG_MODE = True
if __name__ == "__main__":
    
    if DEBUG_MODE == True:
        try:
            os.remove(os.path.join(os.getcwd(), "context.json"))
        except FileNotFoundError:
            pass
    
    chatbot = ChatBot()
    asyncio.run(chatbot.run_chat())
